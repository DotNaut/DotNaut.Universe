@namespace DotNaut.Content
@using System.Data
@using System.Reflection
@using Microsoft.Extensions.Configuration
@using Microsoft.JSInterop
@typeparam TConnection where TConnection : IDbConnection, new()
@inject IConfiguration configuration
@inject IComponentRenderer renderer
@inject IJSRuntime JS
@inject IToastService ToastService
@implements IAsyncDisposable

@* TODO:Support textarea? Or embed external editor *@
@* TODO:
    We can work with some interface which providers a DB/SQL statements as an output. 
    This interface can be implented by embedded resources, local file, Razor component, 
    set of components, etc.
    Maybe scripts can be somehow injected into the DI?
    Dangerous scripts with confirmations.
*@

<FluentStack Orientation="Orientation.Horizontal" VerticalAlignment="VerticalAlignment.Center">
    <FluentSelect TOption="IConfigurationSection"
        Items=@Configs
        OptionValue="@(config => config.Key)"
        OptionText="@(config => config.Key)"
        Placeholder="Choose a connection config"
        @bind-SelectedOption="@SelectedConfig" 
    />

    @if (SelectedConfig != null)
    {
        <FluentButton Appearance="Appearance.Accent" OnClick=@Run>Run</FluentButton>
    }

    @if (Done)
    {
        <FluentIcon Value="@(new Icons.Filled.Size24.CheckmarkCircle())" Color=@Color.Success />
    }
    <FluentButton Id="@buttonId" IconEnd="@(new Icons.Regular.Size16.DocumentCopy())" Appearance="Appearance.Stealth" Title="Copy" />
</FluentStack>


<code>
    <pre id="@codeId" style="overflow-y:scroll;max-height:200px">@ChildContent</pre>
</code>

<DataTableView Table=@Table />

@if (Error != null)
{
    <div style="background-color: #fee; padding: 1rem; color: #c00">
        @Error
    </div>
}

@code {
    [Parameter]
    public required string ConfigSection { get; set; }

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [Parameter]
    public string? Script { get; set; }

    [Parameter]
    public Func<string, TConnection, Task>? CustomAction { get; set; }

    [Parameter]
    public Func<string, IDbCommand, Task>? ExecuteAction { get; set; }

    [Parameter]
    public string[] StatementDelimiters { get; set; } = [";\n", ";\r"];

    public IEnumerable<IConfigurationSection>? Configs { get; set; }

    public IConfigurationSection? SelectedConfig { get; set; }

    public int MaxRows { get; set; } = 10;

    public DataTable? Table { get; set; }

    public string? Error { get; set; }

    public bool Done { get; set; }

    protected override Task OnParametersSetAsync()
    {
        var section = configuration.GetSection(ConfigSection);
        //TODO: if (section == null)
        Configs = section.GetChildren();


        return base.OnParametersSetAsync();
    }

    string buttonId = Guid.NewGuid().ToString();
    string codeId = Guid.NewGuid().ToString();
    private DotNetObjectReference<DbConsole<TConnection>>? dotNetHelper;
    private const string JAVASCRIPT_FILE = "./_content/DotNaut.Specs.Components/js/common.js";
    private IJSObjectReference? module;

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            module = await JS.InvokeAsync<IJSObjectReference>("import", JAVASCRIPT_FILE);
            dotNetHelper = DotNetObjectReference.Create(this);
            await module.InvokeVoidAsync("DotNetHelpers.setDotNetObjectReference",
                dotNetHelper);
            await module.InvokeVoidAsync("addCodeSelection", [buttonId, codeId]);
        }
    }

    [JSInvokable]
    public Task ToastSuccess(string message)
    {
        ToastService.ShowSuccess(message);
        return Task.CompletedTask;
    }

    async ValueTask IAsyncDisposable.DisposeAsync()
    {
        if (module is not null)
        {
            try
            {
                await module.DisposeAsync();
            }
            catch (JSDisconnectedException)
            {
                // Most likely not an error
            }
        }

        dotNetHelper?.Dispose();
    }

    public async void Run()
    {
        Error = null;
        Done = false;

        if (SelectedConfig == null)
        {
            Error = "No connection config selected";
            return;
        }

        using var connection = new TConnection();
        connection.ConnectionString = SelectedConfig.Value;

        try
        {
            if (CustomAction != null)
            {
                await InvokeAsync(() => CustomAction(SelectedConfig.Key, connection));
            }
            else
            {
                var sql = Script;
                if (ChildContent != null)
                {
                    sql = await renderer.RenderFragment(ChildContent);
                }

                if (sql == null)
                {
                    throw new InvalidOperationException("No code provided");
                }

                var statements = sql
                    .Split(StatementDelimiters, StringSplitOptions.RemoveEmptyEntries)
                    .Select(statement => statement.Trim())
                    .Where(statement => !string.IsNullOrWhiteSpace(statement))
                ;

                connection.Open();

                //TODO:Support multiple tables, limit numbers of records in each table, scalar/void returns
                //TODO:Better support for multiple statements (maybe tabular results)
                foreach (var statement in statements)
                {
                    using var command = connection.CreateCommand();
                    command.CommandText = statement;

                    if (ExecuteAction != null)
                    {
                        await ExecuteAction(SelectedConfig.Key, command);
                    }
                    else
                    {
                        using var reader = command.ExecuteReader();
                        Table = new DataTable();
                        Table.Load(reader);
                    }
                }
            }

            Done = true;
        }
        catch (Exception e)
        {
            Error = e.Message;
        }

        await InvokeAsync(StateHasChanged);
    }
}
