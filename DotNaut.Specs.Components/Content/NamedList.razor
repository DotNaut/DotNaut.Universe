@using DotNaut.Ontology
@using Microsoft.AspNetCore.Components

@namespace DotNaut.Content
@typeparam TItem where TItem : INamed

@inject IRouteDiscovery<TItem> RouteDiscovery

@{
    var list = RouteDiscovery.Discover(Parent.GetType());

    if (Comparer != null)
    {
        list = list.OrderBy(item => item.Item, Comparer!);
    }
}

<ul>
    @foreach (var item in list)
    {
        <li>
            @Prefix?.Invoke(item.Item)

            <a href=@item.Route?.Template>
                @((item.Item as INamed).Name)
            </a>

            @Suffix?.Invoke(item.Item)
        </li>
    }
</ul>

@code {
    [Parameter]
    public ComponentBase Parent { get; set; }

    [Parameter]
    public IComparer<TItem>? Comparer { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Prefix { get; set; }

    [Parameter]
    public RenderFragment<TItem>? Suffix { get; set; }
}
